import customtkinter
import os
from tkinter import messagebox
from PIL import Image
from rpi_backlight import Backlight
import serial #UART
import time   #UART
import socket


  #GUI fra termina
if os.environ.get('DISPLAY','') == '':
    print('no display found. Using :0.0')
    os.environ.__setitem__('DISPLAY', ':0.0')

# init serial
ser = serial.Serial("/dev/serial0", 115200, timeout=1)

#GUI Applikasjon
class App(customtkinter.CTk):
    def __init__(self):
        super().__init__()


        customtkinter.set_appearance_mode("dark")  # Modes: system (default), light, dark
        customtkinter.set_default_color_theme("blue")  # Themes: blue (default), dark-blue, green

        # Configure window
        self.title("Rubiks Cube solver")
        self.geometry(f"{800}x{440}")
        # Removes titlebar
        #self.overrideredirect(True)

        # Window full screen
        self.attributes("-fullscreen", True)

        # set main window grid layout 1x2
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(1, weight=1)

        # load images with light and dark mode image
        image_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "test_images")
        print(os.getcwd())

        self.logo_image = customtkinter.CTkImage(Image.open(os.path.join(image_path, "NOV.png")),
                                                 size=(66, 36))
        self.logo_home = customtkinter.CTkImage(Image.open(os.path.join(image_path, "home2.png")),
                                                size=(36, 36))
        self.logo_settings = customtkinter.CTkImage(Image.open(os.path.join(image_path, "settings.png")),
                                                    size=(36, 36))
        self.logo_poweroff = customtkinter.CTkImage(Image.open(os.path.join(image_path, "poweroff.png")),
                                                    size=(36, 36))
        self.rubikscube = customtkinter.CTkImage(Image.open(os.path.join(image_path, "RubiksCube.png")),
                                                 size=(300, 300))
        self.RCscramble = customtkinter.CTkImage(Image.open(os.path.join(image_path, "RCscramble.png")),
                                                 size=(300, 300))

        self.RotLeft = customtkinter.CTkImage(Image.open(os.path.join(image_path, "RotLeft.png")),
                                                    size=(36, 36))
        self.RotRight = customtkinter.CTkImage(Image.open(os.path.join(image_path, "RotRight.png")),
                                                    size=(36, 36))

        self.upArrow = customtkinter.CTkImage(Image.open(os.path.join(image_path, "upArrow.png")),
                                                    size=(36, 36))
        self.downArrow = customtkinter.CTkImage(Image.open(os.path.join(image_path, "downArrow.png")),
                                                    size=(36, 36))




        # create navigation frame
        self.navigation_frame = customtkinter.CTkFrame(self, corner_radius=0)
        self.navigation_frame.grid(row=0, column=0, sticky="nsew")
        self.navigation_frame.grid_rowconfigure(4, weight=1)
        #NOV logo
        self.navigation_frame_label = customtkinter.CTkLabel(self.navigation_frame, text="", image=self.logo_image,
                                                             compound="left",
                                                             font=customtkinter.CTkFont(size=15, weight="bold"))
        self.navigation_frame_label.grid(row=0, column=0, padx=20, pady=20)
        # Home button
        self.home_button = customtkinter.CTkButton(self.navigation_frame, corner_radius=0, height=150,
                                                   border_spacing=10, text="Home", image=self.logo_home,
                                                   fg_color="transparent", text_color=("gray10", "gray90"),
                                                   hover_color=("gray70", "gray30"),
                                                   anchor="w", command=self.home_button_event)
        self.home_button.grid(row=3, column=0, sticky="ew", )
        # Settings button
        self.frame_2_button = customtkinter.CTkButton(self.navigation_frame, corner_radius=0, height=150,
                                                      border_spacing=10, text="Settings", image=self.logo_settings,
                                                      fg_color="transparent", text_color=("gray10", "gray90"),
                                                      hover_color=("gray70", "gray30"),
                                                      anchor="w", command=self.frame_2_button_event)
        self.frame_2_button.grid(row=4, column=0, sticky="ew")
        # Exit button
        self.frame_3_button = customtkinter.CTkButton(self.navigation_frame, corner_radius=0, height=150,
                                                      border_spacing=10, text="Exit", image=self.logo_poweroff,
                                                      fg_color="transparent", text_color=("gray10", "gray90"),
                                                      hover_color=("gray70", "gray30"),
                                                      anchor="w", command=self.frame_3_button_event)
        self.frame_3_button.grid(row=5, column=0, sticky="ew")



        # create navigation home frame
        self.home_frame = customtkinter.CTkFrame(self, corner_radius=0, fg_color="transparent")
        self.home_frame.grid_columnconfigure(0, weight=1)

        # create solve/scramble frame
        self.SoSc = customtkinter.CTkFrame(self.home_frame, corner_radius=0, fg_color="transparent")
        self.SoSc.place(relx=0.5, rely=0.5, anchor="center")

        # solve w/cam
        self.home_frame_large_image_label = customtkinter.CTkLabel(self.SoSc, text="", image=self.rubikscube)
        self.home_frame_large_image_label.grid(row=0, column=0, padx=20, pady=10)

        self.home_frame_cam_solve = customtkinter.CTkButton(self.SoSc, height=50, width=100, text="Solve",
                                                           command=self.camSolve)
        self.home_frame_cam_solve.grid(row=1, column=0, padx=20, pady=10)


        # Scramble
        self.home_frame_large_image_label2 = customtkinter.CTkLabel(self.SoSc, text="", image=self.RCscramble)
        self.home_frame_large_image_label2.grid(row=0, column=1, padx=20, pady=10)

        self.home_frame_button_2 = customtkinter.CTkButton(self.SoSc, height=50, width=100, text="Scramble",
                                                           command=self.ScrambleFunc)
        self.home_frame_button_2.grid(row=1, column=1, padx=20, pady=10)



        # create navigation settings frame..........
        self.second_frame = customtkinter.CTkFrame(self, corner_radius=0, fg_color="transparent")
        self.second_frame.place()

        #self.layout_frame = customtkinter.CTkFrame(self.second_frame, corner_radius=0, fg_color="transparent")
        #self.layout_frame.place()

        # frame1 layout
        self.f1 = customtkinter.CTkFrame(self.second_frame, width= 250, height=185, corner_radius=0,
                                         fg_color="transparent",bg_color='transparent')
        self.f1.grid(row=0, column=0, sticky='NEWS')




        # vertical frame layout
        self.fvertical = customtkinter.CTkFrame(self.second_frame, width=175, height=100, corner_radius=0,
                                         fg_color="transparent", bg_color='transparent')
        self.fvertical.grid(row=0, column=2, sticky='NEWS',rowspan= 3)

        # Grid configuration second frame
        self.second_frame.columnconfigure(0,weight=1)
        self.second_frame.rowconfigure(0,weight=1)
        self.second_frame.columnconfigure(1,weight=1)
        self.second_frame.rowconfigure(1,weight=1)



        # Create light mode
        self.appearance_mode_label = customtkinter.CTkLabel(self.fvertical, text="Appearance Mode:", anchor="w")
        self.appearance_mode_label.grid(row=0, column=0, padx=20, pady=(10, 0))
        self.appearance_mode_optionemenu = customtkinter.CTkOptionMenu(self.fvertical,values=["Dark","Light", "System"],
                                                                       command=self.change_appearance_mode_event)
        self.appearance_mode_optionemenu.grid(row=1,column=0, padx=20, pady=(10, 10))



        # create brightnes level slider+Label
        self.appearance_mode_label = customtkinter.CTkLabel(self.fvertical, text="Screen brightness:", anchor="w")
        self.appearance_mode_label.grid(row=2, column=0, padx=20, pady=10)
        self.slider_1 = customtkinter.CTkSlider(self.fvertical, from_=10, to=100, number_of_steps=10,
                                                command=self.adjust_brightness)
        self.slider_1.grid(row=3, column=0, padx=20, pady=10)


        # Setting Labels
        self.settings_side_label = customtkinter.CTkLabel(self.f1, text="Side:", anchor="w")
        self.settings_side_label.grid(row=0, column=0, padx=10, pady=10)

        self.settings_ccw_label = customtkinter.CTkLabel(self.f1, text="Incremental:", anchor="w")
        self.settings_ccw_label.grid(row=0, column=1, padx=10, pady=10)

        self.settings_cw_label = customtkinter.CTkLabel(self.f1, text="90deg:", anchor="w")
        self.settings_cw_label.grid(row=0, column=3, padx=10, pady=10)

        self.settings_up_label = customtkinter.CTkLabel(self.f1, text="Up", anchor="w")
        self.settings_up_label.grid(row=3, column=0, padx=0, pady=0)

        self.settings_right_label = customtkinter.CTkLabel(self.f1, text="Right", anchor="w")
        self.settings_right_label.grid(row=4, column=0, padx=0, pady=0)

        self.settings_front_label = customtkinter.CTkLabel(self.f1, text="Front", anchor="w")
        self.settings_front_label.grid(row=5, column=0, padx=0, pady=0)

        self.settings_down_label = customtkinter.CTkLabel(self.f1, text="Down", anchor="w")
        self.settings_down_label.grid(row=6, column=0, padx=0, pady=0)

        self.settings_left_label = customtkinter.CTkLabel(self.f1, text="Left", anchor="w")
        self.settings_left_label.grid(row=7, column=0, padx=0, pady=0)

        self.settings_back_label = customtkinter.CTkLabel(self.f1, text="Back", anchor="w")
        self.settings_back_label.grid(row=8, column=0, padx=0, pady=0)


        # UP
        self.settings_Iccw = customtkinter.CTkButton(self.f1, height=20, width=40, text="", image=self.RotLeft,
                                                           command=self.UpIccw)
        self.settings_Iccw.grid(row=3, column=1, padx=10, pady=10)

        self.settings_Icw = customtkinter.CTkButton(self.f1, height=20, width=40, text="", image=self.RotRight,
                                                           command=self.UpIcw)
        self.settings_Icw.grid(row=3, column=2, padx=10, pady=10)

        self.settings_90ccw = customtkinter.CTkButton(self.f1, height=20, width=40, text="", image=self.RotLeft,
                                                           command=self.Up90ccw)
        self.settings_90ccw.grid(row=3, column=3, padx=10, pady=10)

        self.settings_90cw = customtkinter.CTkButton(self.f1, height=20, width=40, text="", image=self.RotRight,
                                                           command=self.Up90cw)
        self.settings_90cw.grid(row=3, column=4, padx=10, pady=10)

        # RIGHT
        self.settings_Iccw = customtkinter.CTkButton(self.f1, height=20, width=40, text="", image=self.RotLeft,
                                                           command=self.RightIccw)
        self.settings_Iccw.grid(row=4, column=1, padx=10, pady=10)

        self.settings_Icw = customtkinter.CTkButton(self.f1, height=20, width=40, text="", image=self.RotRight,
                                                           command=self.RightIcw)
        self.settings_Icw.grid(row=4, column=2, padx=10, pady=10)

        self.settings_90ccw = customtkinter.CTkButton(self.f1, height=20, width=40, text="", image=self.RotLeft,
                                                           command=self.Right90ccw)
        self.settings_90ccw.grid(row=4, column=3, padx=10, pady=10)

        self.settings_90cw = customtkinter.CTkButton(self.f1, height=20, width=40, text="", image=self.RotRight,
                                                           command=self.Right90cw)
        self.settings_90cw.grid(row=4, column=4, padx=10, pady=10)

        # Front
        self.settings_Iccw = customtkinter.CTkButton(self.f1, height=20, width=40, text="", image=self.RotLeft,
                                                           command=self.FrontIccw)
        self.settings_Iccw.grid(row=5, column=1, padx=10, pady=10)

        self.settings_Icw = customtkinter.CTkButton(self.f1, height=20, width=40, text="", image=self.RotRight,
                                                           command=self.FrontIcw)
        self.settings_Icw.grid(row=5, column=2, padx=10, pady=10)

        self.settings_90ccw = customtkinter.CTkButton(self.f1, height=20, width=40, text="", image=self.RotLeft,
                                                           command=self.Front90ccw)
        self.settings_90ccw.grid(row=5, column=3, padx=10, pady=10)

        self.settings_90cw = customtkinter.CTkButton(self.f1, height=20, width=40, text="", image=self.RotRight,
                                                           command=self.Front90cw)
        self.settings_90cw.grid(row=5, column=4, padx=10, pady=10)

        # Down
        self.settings_Iccw = customtkinter.CTkButton(self.f1, height=20, width=40, text="", image=self.RotLeft,
                                                           command=self.DownIccw)
        self.settings_Iccw.grid(row=6, column=1, padx=10, pady=10)

        self.settings_Icw = customtkinter.CTkButton(self.f1, height=20, width=40, text="", image=self.RotRight,
                                                           command=self.DownIcw)
        self.settings_Icw.grid(row=6, column=2, padx=10, pady=10)

        self.settings_90ccw = customtkinter.CTkButton(self.f1, height=20, width=40, text="", image=self.RotLeft,
                                                           command=self.Down90ccw)
        self.settings_90ccw.grid(row=6, column=3, padx=10, pady=10)

        self.settings_90cw = customtkinter.CTkButton(self.f1, height=20, width=40, text="", image=self.RotRight,
                                                           command=self.Down90cw)
        self.settings_90cw.grid(row=6, column=4, padx=10, pady=10)

        # LEFT
        self.settings_Iccw = customtkinter.CTkButton(self.f1, height=20, width=40, text="", image=self.RotLeft,
                                                           command=self.LeftIccw)
        self.settings_Iccw.grid(row=7, column=1, padx=10, pady=10)

        self.settings_Icw = customtkinter.CTkButton(self.f1, height=20, width=40, text="", image=self.RotRight,
                                                           command=self.LeftIcw)
        self.settings_Icw.grid(row=7, column=2, padx=10, pady=10)

        self.settings_90ccw = customtkinter.CTkButton(self.f1, height=20, width=40, text="", image=self.RotLeft,
                                                           command=self.Left90ccw)
        self.settings_90ccw.grid(row=7, column=3, padx=10, pady=10)

        self.settings_90cw = customtkinter.CTkButton(self.f1, height=20, width=40, text="", image=self.RotRight,
                                                           command=self.Left90cw)
        self.settings_90cw.grid(row=7, column=4, padx=10, pady=10)

        # BACK
        self.settings_Iccw = customtkinter.CTkButton(self.f1, height=20, width=40, text="", image=self.RotLeft,
                                                           command=self.BackIccw)
        self.settings_Iccw.grid(row=8, column=1, padx=10, pady=10)

        self.settings_Icw = customtkinter.CTkButton(self.f1, height=20, width=40, text="", image=self.RotRight,
                                                           command=self.BackIcw)
        self.settings_Icw.grid(row=8, column=2, padx=10, pady=10)

        self.settings_90ccw = customtkinter.CTkButton(self.f1, height=20, width=40, text="", image=self.RotLeft,
                                                           command=self.Back90ccw)
        self.settings_90ccw.grid(row=8, column=3, padx=10, pady=10)

        self.settings_90cw = customtkinter.CTkButton(self.f1, height=20, width=40, text="", image=self.RotRight,
                                                           command=self.Back90cw)
        self.settings_90cw.grid(row=8, column=4, padx=10, pady=10)


       
    
       
        # Speed
        self.settings_speed = customtkinter.CTkLabel(self.fvertical, text="Speed settings:", anchor="w")
        self.settings_speed.grid(row=5, column=0, padx=10, pady=10)

        self.settings_upSpeed = customtkinter.CTkButton(self.fvertical, height=20, width=40, text="High Speed", image=self.upArrow,
                                                           command=self.upSpeed)
        self.settings_upSpeed.grid(row=6, column=0, padx=10, pady=10)

        self.settings_downSpeed = customtkinter.CTkButton(self.fvertical, height=20, width=40, text="Low Speed", image=self.downArrow,
                                                           command=self.downSpeed)
        self.settings_downSpeed.grid(row=7, column=0, padx=10, pady=10)










        # Create navigation exit frame
        self.third_frame = customtkinter.CTkFrame(self, corner_radius=0, fg_color="transparent")
        # create frame for buttons
        self.ExRe = customtkinter.CTkFrame(self.third_frame, corner_radius=0, fg_color="transparent")
        self.ExRe.place(relx=0.5, rely=0.5, anchor="center")

        # ExitButton
        self.third_frame_button_1 = customtkinter.CTkButton(self.ExRe, height=50, width=100,text="Exit to Desktop",
                                                            command=self.buttonExit)
        self.third_frame_button_1.grid(row=0, column=0,padx=10, pady=10)

        # RebootButton
        self.third_frame_button_2 = customtkinter.CTkButton(self.ExRe, height=50, width=100, text="System shutdown",
                                                            command=self.systemShutdown)
        self.third_frame_button_2.grid(row=0, column=1,padx=10, pady=10)



        # select default frame
        self.select_frame_by_name("home")

    def select_frame_by_name(self, name):
        # set button color for selected button
        self.home_button.configure(fg_color=("gray75", "gray25") if name == "home" else "transparent")
        self.frame_2_button.configure(fg_color=("gray75", "gray25") if name == "frame_2" else "transparent")
        self.frame_3_button.configure(fg_color=("gray75", "gray25") if name == "frame_3" else "transparent")

        # show selected frame
        if name == "home":
            self.home_frame.grid(row=0, column=1, sticky="nsew")
        else:
            self.home_frame.grid_forget()
        if name == "frame_2":
            self.second_frame.grid(row=0, column=1, sticky="nsew")
        else:
            self.second_frame.grid_forget()
        if name == "frame_3":
            self.third_frame.grid(row=0, column=1, sticky="nsew")
        else:
            self.third_frame.grid_forget()

    def home_button_event(self):
        self.select_frame_by_name("home")

    def frame_2_button_event(self):
        self.select_frame_by_name("frame_2")

    def frame_3_button_event(self):
        self.select_frame_by_name("frame_3")

    def change_appearance_mode_event(self, new_appearance_mode):
        customtkinter.set_appearance_mode(new_appearance_mode)

    def buttonExit(self):
        self.destroy()

    def systemShutdown(self):
        print("System shutdown")
        ser.write(b"Y\n")
        ser.write(b"Y\n")
        os.system("sudo shutdown -h now")



    def camSolve(self):
        print('Solve')
        result_question1 = messagebox.askquestion(title="Question",message="Do you wish to proceed?")
        if result_question1 == "yes":
            print("kall funksjon som sender melding til Jetson Nano")
            ser.write(b"z\n")
            print("Message sent")
        
        else:
            print("ikke start maskin")

    def Solve(self):
         print('Solve')
         result_question1 = messagebox.askquestion(title="Question",message="Do you wish to proceed?")
         if result_question1 == "yes":
            print("kall funksjon som sender melding til Jetson Nano")
            ser.write(b"Z\n")
            print("Message sent")
        
         else:
            print("ikke start maskin")



    def ScrambleFunc(self):
        print('Scramble')
        result_question2 = messagebox.askquestion(title="Question",message="Do you wish to proceed?")
        if result_question2 == "yes":
            print("kall funksjon som sender melding til Jetson Nano")
            ser.write(b"S\n")
            print("Message sent")
        else:
            print("ikke start maskin")
    

    def UpIccw(self):
        print("UpIccw")       
        ser.write(b"a\n")
        print("Message sent")
    def UpIcw(self):
        print("UpIcw")
        ser.write(b"b\n")
        print("Message sent")
    def Up90ccw(self):
        print("Up90ccw")
        ser.write(b"A\n")
        print("Message sent")
    def Up90cw(self):
        print("Up90cw")
        ser.write(b"C\n")
        print("Message sent")

    def RightIccw(self):
        print("RightIccw")
        ser.write(b"c\n")
        print("Message sent")
    def RightIcw(self):
        print("RightIcw")
        ser.write(b"d\n")
        print("Message sent")
    def Right90ccw(self):
        print("Right90ccw")
        ser.write(b"D\n")
        print("Message sent")
    def Right90cw(self):
        print("Right90cw")
        ser.write(b"F\n")
        print("Message sent")

    def FrontIccw(self):
        print("FrontIccw")
        ser.write(b"e\n")
        print("Message sent")
    def FrontIcw(self):
        print("FrontIcw")
        ser.write(b"f\n")
        print("Message sent")
    def Front90ccw(self):
        print("Front90ccw")
        ser.write(b"G\n")
        print("Message sent")
    def Front90cw(self):
        print("Front90cw")
        ser.write(b"I\n")
        print("Message sent")

    def DownIccw(self):
        print("DownIccw")
        ser.write(b"g\n")
        print("Message sent")
    def DownIcw(self):
        print("DownIcw")
        ser.write(b"h\n")
        print("Message sent")
    def Down90ccw(self):
        print("Down90ccw")
        ser.write(b"J\n")
        print("Message sent")
    def Down90cw(self):
        print("Down90cw")
        ser.write(b"L\n")
        print("Message sent")

    def LeftIccw(self):
        print("LeftIccw")
        ser.write(b"i\n")
        print("Message sent")
    def LeftIcw(self):
        print("LeftIcw")
        ser.write(b"j\n")
        print("Message sent")
    def Left90ccw(self):
        print("Left90ccw")
        ser.write(b"M\n")
        print("Message sent")
    def Left90cw(self):
        print("Left90cw")
        ser.write(b"O\n")
        print("Message sent")

    def BackIccw(self):
        print("BackIccw")
        ser.write(b"k\n")
        print("Message sent")
    def BackIcw(self):
        print("BackIcw")
        ser.write(b"l\n")
        print("Message sent")
    def Back90ccw(self):
        print("Back90ccw")
        ser.write(b"P\n")
        print("Message sent")
    def Back90cw(self):
        print("Back90cw")
        ser.write(b"R\n")
        print("Message sent")


    def upSpeed(self):
        print("upSpeed")
        ser.write(b"U\n")
        print("Message sent")
    def downSpeed(self):
        print("downSpeed")
        ser.write(b"T\n")
        print("Message sent")









    def adjust_brightness(self, value):
        value = int(value)
        print(value)
        backlight = Backlight()
        backlight.brightness = value


if __name__ == "__main__":
    app = App()
    
    app.mainloop()
